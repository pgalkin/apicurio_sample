services:
  mysql:
    image: mysql:5.7.38
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: db_dev
      MYSQL_HISTFILE: /usr/local/hist/.mysql_history
    ports:
      - 3306
    networks:
      - the_network
    volumes:
      - ./mysql_config.cnf:/etc/mysql/conf.d/mysql_config.cnf
      - ./mysqlsampledatabase.sql:/docker-entrypoint-initdb.d/00_dump.sql
      - ./init.sql:/docker-entrypoint-initdb.d/10_init.sql
      - ../tmp/dumps:/tmp/dumps
      - mysql:/var/lib/mysql
      - history:/usr/local/hist
    healthcheck:
      test: MYSQL_PWD=password mysqladmin ping -h mysql
      timeout: 5s
      retries: 10
  zookeeper:
    image: quay.io/debezium/zookeeper:2.4.1.Final
    networks:
      - the_network
    volumes:
      - zookeeper_data:/zookeeper/data
      - zookeeper_txns:/zookeeper/txns
      - zookeeper_logs:/zookeeper/logs
      - zookeeper_conf:/zookeeper/conf
    ports:
      - 2181:2181
      - 2888:2888
      - 3888:3888
      - 8082:8080
  kafka:
    image: quay.io/debezium/kafka:2.4.1.Final
    ports:
     - 9092:9092
    networks:
      - the_network
    volumes:
      - kafka_data:/kafka/data
      - kafka_logs:/kafka/logs
      - kafka_config:/kafka/config
    depends_on:
      zookeeper:
        condition: service_started
    environment:
      ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_COMPRESSION_TYPE: 'gzip'
  connect:
    image: quay.io/debezium/connect:2.4.1.Final
    ports:
      - 8083:8083
      - 8778:8778
    networks:
      - the_network
    volumes:
      - kafka_data:/kafka/data
      - kafka_logs:/kafka/logs
      - kafka_config:/kafka/config
    depends_on:
      kafka:
        condition: service_started
      apicurio:
        condition: service_started
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: 123
      CONFIG_STORAGE_TOPIC: app-connect-configs
      OFFSET_STORAGE_TOPIC: app-connect-offsets
      STATUS_STORAGE_TOPIC: app-connect-statuses
      LOG_LEVEL: INFO
      ENABLE_JOLOKIA: true
      ENABLE_DEBEZIUM_SCRIPTING: true
      ENABLE_APICURIO_CONVERTERS: true
      KEY_CONVERTER: io.apicurio.registry.utils.converter.AvroConverter
      VALUE_CONVERTER: io.apicurio.registry.utils.converter.AvroConverter
      CONNECT_KEY_CONVERTER_APICURIO_REGISTRY_URL: http://apicurio:8084/apis/registry/v2
      CONNECT_KEY_CONVERTER_APICURIO_REGISTRY_AUTO-REGISTER: true
      CONNECT_KEY_CONVERTER_APICURIO_REGISTRY_FIND-LATEST: true
      CONNECT_VALUE_CONVERTER_APICURIO_REGISTRY_URL: http://apicurio:8084/apis/registry/v2
      CONNECT_VALUE_CONVERTER_APICURIO_REGISTRY_AUTO-REGISTER: true
      CONNECT_VALUE_CONVERTER_APICURIO_REGISTRY_FIND-LATEST: true
      CONNECT_SCHEMA_NAME_ADJUSTMENT_MODE: avro
  akhq:
    image: tchiotludo/akhq:0.24.0
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: "kafka:9092"
              schema-registry:
                url: "http://apicurio:8084/apis/ccompat/v7"
                type: "confluent"
              connect:
                - name: "connect"
                  url: "http://connect:8083"
    ports:
      - 8080:8080
      - 28081:28081
    networks:
      - the_network
    depends_on:
      kafka:
        condition: service_started
      apicurio:
        condition: service_started
  apicurio:
    image: apicurio/apicurio-registry-mem:2.4.1.Final
    ports:
      - 8084:8080
    networks:
      - the_network
    depends_on:
      kafka:
        condition: service_started
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      QUARKUS_LOG_LEVEL: DEBUG
      REGISTRY_UI_CONFIG_APIURL: http://apicurio:8084/apis/registry/v2
      REGISTRY_UI_CONFIG_UIURL: http://apicurio:8084/ui
      REGISTRY_API_ERRORS_INCLUDE-STACK-IN-RESPONSE: true
  debezium_tooling:
    image: quay.io/debezium/tooling
    tty: true
    networks:
      - the_network
    volumes:
      - ./sample.json:/sample.json
    command: bash

volumes:
  history:
  mysql:
  zookeeper_data:
  zookeeper_txns:
  zookeeper_logs:
  zookeeper_conf:
  kafka_data:
  kafka_logs:
  kafka_config:

networks:
  the_network:
    name: the_network
    external: true
